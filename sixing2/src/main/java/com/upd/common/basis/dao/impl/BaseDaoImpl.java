package com.upd.common.basis.dao.impl;import com.upd.common.basis.dao.BaseDao;import com.upd.common.util.page.Pagination;import com.upd.common.util.queryParameter.Order;import com.upd.common.util.queryParameter.QueryParam;import com.upd.common.util.queryParameter.SearchCondition;import org.apache.log4j.Logger;import org.hibernate.HibernateException;import org.hibernate.Query;import org.hibernate.Session;import org.hibernate.SessionFactory;import org.hibernate.hql.internal.ast.QueryTranslatorImpl;import org.hibernate.internal.SessionFactoryImpl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.orm.hibernate4.HibernateCallback;import org.springframework.orm.hibernate4.support.HibernateDaoSupport;import org.springframework.stereotype.Repository;import java.io.Serializable;import java.lang.reflect.ParameterizedType;import java.lang.reflect.Type;import java.math.BigInteger;import java.util.ArrayList;import java.util.Collections;import java.util.List;/** * @Description:DAO操作基类实现类,实现了通用的数据操作 * @author: 张守兵 * @date: 2015/12/09. */@SuppressWarnings("unchecked")@Repository("baseDao")public class BaseDaoImpl<T, ID extends Serializable> extends        HibernateDaoSupport implements BaseDao<T, ID> {    /**     * log4j日志     *     * @pdOid e46e6faa-3f98-4d8f-a2e5-854c8084276a     */    static Logger logger = Logger.getLogger(BaseDaoImpl.class);    public Class<?> getEntityClass() {        return entityClass;    }    private Class<?> entityClass;    @Autowired    public void setSessionFacotry(SessionFactory sessionFacotry) {        super.setSessionFactory(sessionFacotry);    }    public BaseDaoImpl() {        Class<?> c = this.getClass();        Type t = c.getGenericSuperclass();        if (t instanceof ParameterizedType) {            this.entityClass = (Class<?>) ((ParameterizedType) t)                    .getActualTypeArguments()[0];        }    }    public Object findById(int id) {        return  this.getHibernateTemplate().get(entityClass.getName(), id);    }    /**     * 保存指定实体类     *     *     * @param entity     * @pdOid 98a43608-d93b-4573-9042-0c51409761ed     */    public void save(T entity) {        try {            getHibernateTemplate().save(entity);            if (logger.isInfoEnabled()) {                logger.info("保存实体类成功," + entity.getClass().getName());            }        } catch (RuntimeException e) {            logger.error("保存实体异常," + entity.getClass().getName(), e);            throw e;        }    }    @Override    public void update(T entity) {        try {            getHibernateTemplate().update(entity);            getHibernateTemplate().flush();            if (logger.isInfoEnabled()) {                logger.info("修改实体类成功," + entity.getClass().getName());            }        } catch (RuntimeException e) {            logger.error("修改实体异常," + entity.getClass().getName(), e);            throw e;        }    }    /**     * 删除指定实体     *     *     * @param entity     * @pdOid 8961f1cc-94a1-4708-9968-f409e88c0d22     */    public void delete(T entity) {        try {            getHibernateTemplate().delete(entity);            getHibernateTemplate().flush();            if (logger.isInfoEnabled()) {                logger.info("删除实体类成功," + entity.getClass().getName());            }        } catch (RuntimeException e) {            logger.error("删除实体异常", e);            throw e;        }    }    public T saveOrUpdate(T entity) {        try {            getHibernateTemplate().saveOrUpdate(entity);            getHibernateTemplate().flush();            if (logger.isInfoEnabled()) {                logger.info("更新或者保存实体成功," + entity.getClass().getName());            }        } catch (RuntimeException e) {            logger.error("更新或保存实体异常", e);            throw e;        }        return entity;    }    @Override    public void delete(ID id) {        try {            getHibernateTemplate().delete(id);            getHibernateTemplate().flush();            if (logger.isInfoEnabled()) {                logger.info("删除实体类成功--," +id);            }        } catch (RuntimeException e) {            logger.error("删除实体异常", e);            throw e;        }    }      @Override       public void deletemore(String ids) {           if(ids==null||ids.equals("")){            logger.error("删除实体异常主键值为空");                return;            }           try {            for(String id:ids.split(",")){                getHibernateTemplate().delete(findById(Integer.parseInt(id)));            }            getHibernateTemplate().flush();            if (logger.isInfoEnabled()) {                logger.info("删除实体类成功--," + ids);            }        } catch (RuntimeException e) {            logger.error("删除实体异常", e);            throw e;        }    }    /**     * 查找指定ID实体类对象     *     *     * @param id     *            实体ID     * @return 实体对象     *     * @pdOid 98fdb537-c8f4-4a1c-aef2-bb705d503691     */    public T load( ID id) {        Object obj = new Object();        try {            if (logger.isInfoEnabled()) {                logger.info("开始加载/查找ID为" + id + "的实体：" + entityClass.getName());            }            obj = getHibernateTemplate().load(entityClass, id);            if (logger.isInfoEnabled()) {                logger.info("结束开始加载/查找ID为" + id + "的实体："                        + entityClass.getName());            }            return (T) obj;        } catch (RuntimeException e) {            logger.error("查找指定ID实体异常，ID：" + id, e);        }        return null;    }    /**     * 查找指定ID实体类对象     *     *     * 实体Class     * @param id     *            实体ID     * @return 实体对象     *     * @pdOid 98fdb537-c8f4-4a1c-aef2-bb705d503691     */    public T get( ID id) {        Object obj = new Object();        try {            if (logger.isInfoEnabled()) {                logger.info("开始加载/查找ID为" + id + "的实体：" + entityClass.getName());            }            obj = getHibernateTemplate().get(entityClass, id);            if (logger.isInfoEnabled()) {                logger.info("结束开始加载/查找ID为" + id + "的实体："                        + entityClass.getName());            }            return (T) obj;        } catch (RuntimeException e) {            logger.error("查找指定ID实体异常，ID：" + id, e);        }        return null;    }    /**     * 根据查询条件与参数列表创建Query对象     *     *     * @param session     *            Hibernate会话     * @param hql     *            HQL语句     * @param objects     *            参数列表     * @return Query对象     *     * @pdOid b020b5dd-f6e5-4590-bf58-c9e0144ed874     */    public Query createQuery(Session session, String hql, Object... objects) {        Query query = session.createQuery(hql);        if (objects != null) {            for (int i = 0; i < objects.length; i++) {                query.setParameter(i, objects[i]);            }        }        return query;    }    //转化参数对象对为hql    public String getpraramhql(QueryParam... params ){        StringBuffer wherehqlbuffer=new StringBuffer();        if (params != null&&params.length>0) {            wherehqlbuffer.append(" where ");            for (int i = 0; i < params.length; i++) {                wherehqlbuffer.append("e."+params[i].getName());                wherehqlbuffer.append(" "+params[i].getOperater()+" ");                if(params[i].getValue()==null){                    wherehqlbuffer.append(" "+params[i].getValue()+" ");                }else {                    wherehqlbuffer.append("'"+params[i].getValue()+"'");                }                if(i<params.length-1){                    wherehqlbuffer.append(" and ");                }            }        }        return wherehqlbuffer.toString();    }    public String getpartpropertyhql(String[] propertys ){        StringBuffer hqlbuffer=new StringBuffer();        if (propertys != null) {            hqlbuffer.append(" select ");            for (int i = 0; i < propertys.length; i++) {                hqlbuffer.append("e."+propertys[i]);                if(i<propertys.length-1){                    hqlbuffer.append(",");                }            }        }        return hqlbuffer.toString();    }    //转化参数对象对为完整hql    public String gethql(String[] propertys,String classname,QueryParam[] params,Order[] orders){        StringBuffer hql=new StringBuffer();        hql.append(getpartpropertyhql(propertys));        hql.append(" from  "+classname+" as e");        hql.append(" "+getpraramhql(params)+" ");        hql.append(" "+getOrderHql(orders)+" ");        return hql.toString();    }    //转化参数对象对为完整hql    public String gethql(QueryParam... params){        if(entityClass==null){            return  null;        }        String classname=entityClass.getName();        return gethql(null,classname,params,null);    }    public String gethql(String classname,SearchCondition searchCondition){        return  gethql(searchCondition.getPropertys(),classname,searchCondition.getParams(),searchCondition.getOrders());    }    public String gethql(SearchCondition searchCondition){        if(entityClass==null){            return  null;        }        String classname=entityClass.getName();        return  gethql(searchCondition.getPropertys(),classname,searchCondition.getParams(),searchCondition.getOrders());    }    /**     * 查找指定HQL并返回INT型     *     *     * @param hql     *            HQL语句     * @param values     *            可变参数列表     * @return INT     *     * @pdOid 97927a63-9d48-4e43-b1b9-796ff5103f31     */    public int findInt(final String hql, final Object... values) {        Object obj = findUnique(hql, values);        return null == obj ? 0 : Integer.parseInt(obj.toString());    }    public Object findObject(final String hql, final Object... values) {        Object obj = findUnique(hql, values);        return null == obj ? 0 : obj;    }    public int findCount(String hql,final Object... values) {        int index = 0;        hql.split("from");        if (hql.indexOf("from") > 0) {            index = hql.lastIndexOf("from");        } else if (hql.indexOf("FROM") > 0) {            index = hql.lastIndexOf("FROM");        }        hql = "select count(*) " + hql.substring(index);        return findInt(hql,values);    }    /**     * 补充方法 可以无视session的状态持久化对象     *     *     * @param entity     *            实体类     * @return 持久后的实体类     *     * @pdOid 87586f3c-c141-44ed-a2ad-5625f720079e     */    public T merge(T entity) {        try {            T result = (T) getHibernateTemplate().merge(entity);            return result;        } catch (RuntimeException re) {            logger.error("merge异常", re);            throw re;        }    }    public List<T> find(String hql, Object... values) {        try {            if (logger.isInfoEnabled()) {                logger.info("开始查询HQL语句," + hql);            }            return   (List<T>) getHibernateTemplate().find(hql,values);        } catch (RuntimeException e) {            logger.error("查询指定HQL异常，HQL：" + hql, e);        }        return null;    }    @Override    public List<T> find(QueryParam... params) {       String hql=gethql(params);        try {            logger.info("开始查询HQL语句," + hql);            return (List<T>) getHibernateTemplate().find(hql);        } catch (RuntimeException e) {            logger.error("查询异常，HQL：" + hql, e);        }        return null;    }    @Override    public List<Object> find(SearchCondition searchCondition) {        String hql=gethql(searchCondition);        try {            logger.info("开始查询HQL语句," + hql);            return (List<Object>) getHibernateTemplate().find(hql);        } catch (RuntimeException e) {            logger.error("查询异常，HQL：" + hql, e);        }        return null;    }    @Override    public int findTotalCount(QueryParam... params) {        String hql=gethql(params);        return findCount(hql);    }    @Override    public int findTotalCount(String hql, Object... values) {        return findInt(hql,values);    }    public List<Object> getTopRows(final String hql, final int rows, final Object... values)            {        try {            if (logger.isInfoEnabled()) {                logger.info("开始查询返回top结果的HQL语句," + hql);            }            List<Object> objects=new ArrayList<Object>();            return  (List<Object>) getHibernateTemplate().execute(new HibernateCallback() {                public Object doInHibernate(Session s)                        throws HibernateException {                    Query query = createQuery(s, hql, values);                    query.setFirstResult(0);                    query.setMaxResults(rows);                    return query.list();                }            });        } catch (RuntimeException e) {            logger.error("查询指定HQL异常，HQL：" + hql, e);        }        return null;    }    @Override    public List<T> getTopRows(int rows, SearchCondition searchCondition) {        try {            String hql=gethql(searchCondition);            List<Object> listobj= getTopRows(hql,rows);            if(listobj==null){                return null;            }            List<T> list=new ArrayList<T>();            for(Object obj:listobj){                list.add((T)obj);            }            return list;        }catch (Exception e){            e.printStackTrace();            return null;        }    }    @Override    public boolean evicObject(Object obj) {        try {            getHibernateTemplate().evict(obj);    } catch (Exception e) {        e.printStackTrace();        return false;    }    return true;    }    public Pagination findbypage( final Pagination page,final String hql,final  Object... values) {            logger.info("开始查找指定HQL分页数据," + hql);        if (page.getTotalCount() == 0) {            page.setTotalCount(this.findCount(hql,values));        }        page.processPage(page.getPageNo(), page.getPageSize(), page                .getTotalCount());        return (Pagination) getHibernateTemplate().execute(                new HibernateCallback() {                    public Object doInHibernate(Session s)                            throws HibernateException {                        try {                            Query query = createQuery(s, hql, values);                            query.setFirstResult(page.getFirstResult());                            query.setMaxResults(page.getPageSize());                            page.setList(query.list());                                logger.info("结束查找指定HQL分页数据," + hql);                        } catch (Exception e) {                            e.printStackTrace();                        }                        return page;                    }                });    }    public Pagination findbypage( final String countHql,final Pagination page, final String hql,final  Object... values) {            logger.info("开始查找指定HQL分页数据," + hql);        if (page.getTotalCount() == 0) {            page.setTotalCount(findTotalCount(countHql,values));        }        page.processPage(page.getPageNo(), page.getPageSize(), page                .getTotalCount());        return (Pagination) getHibernateTemplate().execute(                new HibernateCallback() {                    public Object doInHibernate(Session s)                            throws HibernateException {                        try {                            Query query = createQuery(s, hql, values);                            query.setFirstResult(page.getFirstResult());                            query.setMaxResults(page.getPageSize());                            page.setList(query.list());                            logger.info("结束查找指定HQL分页数据," + hql);                        } catch (Exception e) {                            e.printStackTrace();                        }                        return page;                    }                });    }    public List<T> findbySQL(final String sql,final  Object... values) {        logger.info("开始查找指定SQL分页数据," + sql);        Session session=getSessionFactory().getCurrentSession();        Query query=session.createSQLQuery(sql).addEntity(entityClass);        if (values != null) {            for (int i = 0; i < values.length; i++) {                query.setParameter(i, values[i]);            }        }        return query.list();    }    public Pagination findbyPageSQL( final Pagination page,final String sql,final  Object... values) {        logger.info("开始查找指定HQL分页数据," + sql);        if (page.getTotalCount() == 0) {            page.setTotalCount(this.findCountBySQL(sql,values));        }        Session session=getSessionFactory().getCurrentSession();        Query query=session.createSQLQuery(sql).addEntity(entityClass);        if (values != null) {            for (int i = 0; i < values.length; i++) {                query.setParameter(i, values[i]);            }        }        query.setFirstResult(page.getFirstResult());        query.setMaxResults(page.getPageSize());        page.setList(query.list());        return page;    }    public int findCountBySQL(String sql,final Object... values) {        int index = 0;        sql.split("from");        if (sql.indexOf("from") > 0) {            index = sql.lastIndexOf("from");        } else if (sql.indexOf("FROM") > 0) {            index = sql.lastIndexOf("FROM");        }        sql = "select count(*) " + sql.substring(index);        return findIntBySQL(sql,values);    }    @Override    public Pagination findbypage(Pagination page, QueryParam... params) {        String hql=gethql(params);        return findbypage(page,hql);    }    @Override    public Pagination findbypage(Pagination page, SearchCondition searchCondition) {        String hql=gethql(searchCondition);        return findbypage(page,hql);    }    /**     * 按照HQL语句查询唯一对象.     *     *     * @param rows     *            取第几行     * @param params     *            可变参数集合     * @return OBJECT对象     */    @Override    public List<T> getTopRows(int rows, QueryParam... params) {        try {            String hql=gethql(params);            List<Object> listobj= getTopRows(hql,rows);            if(listobj==null){                return null;            }            List<T> list=new ArrayList<T>();            for(Object obj:listobj){                list.add((T)obj);            }            return list;        }catch (Exception e){        e.printStackTrace();            return null;        }    }    /**     * 按照HQL语句查询唯一对象.     *     *     * @param hql     *            HQL语句     * @param values     *            可变参数集合     * @return OBJECT对象     *     * @pdOid 81f544e4-7f7c-4b93-91f0-5b104d941b4e     */    public Object findUnique(final String hql, final Object... values) {        Object obj = new Object();        try {            if (logger.isInfoEnabled()) {                logger.info("开始查询返回唯一结果的HQL语句," + hql);            }            obj = getHibernateTemplate().execute(new HibernateCallback() {                public Object doInHibernate(Session s)                        throws HibernateException {                    Query query = createQuery(s, hql, values);                    return query.uniqueResult();                }            });            if (logger.isInfoEnabled()) {                logger.info("结束查询返回唯一结果的HQL语句," + hql);            }            return obj;        } catch (RuntimeException e) {            logger.error("查询指定HQL异常，HQL：" + hql, e);        }        return null;    }    public String getOrderHql(Order[] orders){        StringBuilder ql = new StringBuilder();        if (orders!=null&&orders.length!=0) {            ql.append(" order by ");            for (Order order : orders) {                ql.append(order.getProperty());                ql.append(" ");                ql.append(order.getMode());                ql.append(",");            }            ql.delete(ql.length() - 1, ql.length());        }        return ql.toString();      }    public int updateByHql(final String hql, final Object ...values){        return  Integer.parseInt(getHibernateTemplate().execute(new HibernateCallback() {            public Object doInHibernate(Session s)                    throws HibernateException {                Query query = createQuery(s, hql, values);                return query.executeUpdate();            }        }).toString());    }    public String gethql() {        return gethql(null, entityClass.getName(), null, null);    }    @Override    public T findOne(String hql, Object... values) {        List<T> ls=this.find(hql,values);        return null!=ls&&ls.size()>0?ls.get(0):null;    }    public int excuteBySql(String sql,final Object ...values)    {        int result ;        Query query = getSessionFactory().getCurrentSession().createSQLQuery(sql);        if (values != null) {            for (int i = 0; i < values.length; i++) {                query.setParameter(i, values[i]);            }        }        result = query.executeUpdate();        return result;    }    public int findIntBySQL(String sql,final Object ...values)    {        Query query = getSessionFactory().getCurrentSession().createSQLQuery(sql);        if (values != null) {            for (int i = 0; i < values.length; i++) {                query.setParameter(i, values[i]);            }        }        List<BigInteger> list = query.list();        return list.get(0).intValue();    }    public  String transHqlToSql(String hql) {        // 当hql为null或空时,直接返回null        if (hql == null || hql.equals("")) {            return "";        }        // 获取当前session        // 得到session工厂实现类        SessionFactoryImpl sfi = (SessionFactoryImpl) getSessionFactory();        // 得到Query转换器实现类        QueryTranslatorImpl queryTranslator = new QueryTranslatorImpl(hql, hql, Collections.EMPTY_MAP, sfi);        queryTranslator.compile(Collections.EMPTY_MAP, false);        // 得到sql        String sql = queryTranslator.getSQLString();        return sql;    }    public  String transHqlToSql(String hql,Object[] param ) {        // 要返回的sql语句        String sql = transHqlToSql(hql);        // 当为null或空时,返回null        if (sql == null || sql.equals("")) {            return null;        }        // 赋参数值        if ((param != null) && (param.length > 0)) {            for (int i = 0; i < param.length; i++) {                sql = sql.replaceFirst("\\?", "\\'" + param[i].toString() + "\\'");            }        }        return sql;    }}